---
name: Docker Image
description: Creates a Docker Container Image

inputs:
  token:
    description: Github token
    required: true
  push:
    description: Push Images to GHCR
    type: boolean
    required: false
    default: true
  latest:
    description: Update latest tag
    type: boolean
    required: false
    default: true
  tag-strategy:
    description: Tag strategy (sha, latest, semver)
    type: string
    required: false
    default: "auto"

runs:
  using: composite
  steps:
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        flavor: |
          latest=${{ fromJSON(inputs.latest) }}
        tags: |
          type=ref,event=branch,enable=${{ inputs.tag-strategy == 'auto' || inputs.tag-strategy == 'branch' }}
          type=sha,prefix={{branch}}-,enable=${{ inputs.tag-strategy == 'sha' }}
          type=semver,pattern={{version}},prefix=v,enable=${{ inputs.tag-strategy == 'semver' || inputs.tag-strategy == 'auto' }}
          type=semver,pattern={{major}}.{{minor}},prefix=v,enable=${{ inputs.tag-strategy == 'semver' || inputs.tag-strategy == 'auto' }}
          type=semver,pattern={{major}},prefix=v,enable=${{ inputs.tag-strategy == 'semver' || inputs.tag-strategy == 'auto' }}
          type=raw,value=latest,enable=${{ inputs.tag-strategy == 'latest' && fromJSON(inputs.latest) }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Build Docker Image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ fromJSON(inputs.push) }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}